name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-full.txt
        pip install bandit safety flake8 black isort mypy pytest

    - name: Code formatting check
      run: |
        black --check . || true
        isort --check-only . || true

    - name: Lint check
      run: flake8 . || true

    - name: Security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Basic testing
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-full.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
      run: |
        # Create test directories
        mkdir -p data uploads logs results

        # Run basic tests
        python -m pytest tests/ -v --tb=short || true

    - name: Test health endpoints
      run: |
        # Start the app in background for health check testing
        python main.py &
        APP_PID=$!
        sleep 10

        # Test health endpoints
        curl -f http://localhost:5000/health || echo "Health check failed"
        curl -f http://localhost:5000/health/live || echo "Liveness check failed"
        curl -f http://localhost:5000/health/ready || echo "Readiness check failed"

        # Stop the app
        kill $APP_PID || true

  # Container security scanning
  container-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build container
      run: docker build -t video-transcriber:test .

    - name: Run basic container test
      run: |
        # Test container starts successfully
        docker run --rm -d --name test-container video-transcriber:test || true
        sleep 10
        docker logs test-container || true
        docker stop test-container || true

  # Build and push container images
  build-and-push:
    needs: [quality-checks, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy notification
  deploy-notification:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Deployment ready
      run: |
        echo "ðŸš€ Deployment artifacts ready"
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Ready for production deployment"
