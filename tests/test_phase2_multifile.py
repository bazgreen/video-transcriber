"""
Phase 2 Multi-File Upload Test
Tests the enhanced upload experience with multiple files, drag-and-drop, and video preview
"""

import json
import os
import subprocess
import tempfile
import time
from datetime import datetime

import requests
import socketio

# Test results tracking
test_results = {
    "ui_elements_present": False,
    "multi_file_validation": False,
    "drag_drop_support": False,
    "video_preview_modal": False,
    "file_queue_management": False,
    "enhanced_error_messages": False,
    "batch_processing": False,
}


def test_ui_elements():
    """Test 1: Verify new UI elements are present"""
    print("\nüß™ Test 1: Multi-File UI Elements")
    print("-" * 50)

    try:
        response = requests.get("http://localhost:5001/")
        if response.status_code != 200:
            print(f"‚ùå UI not accessible: {response.status_code}")
            return False

        html = response.text

        # Check for multi-file upload elements
        required_elements = [
            "MultiFileUploader",  # Main class
            "file-queue",  # File queue container
            "preview-modal",  # Video preview modal
            "add-files-button",  # Add more files button
            "upload-progress",  # Upload progress elements
            "file-item",  # File item styling
            "drag-feedback",  # Drag feedback styling
            'accept="video/*"',  # Video file restriction
            "multiple",  # Multiple file attribute
            "validateFile",  # File validation function
            "showPreview",  # Preview functionality
            "removeFile",  # Remove file functionality
            "processQueue",  # Queue processing
        ]

        missing_elements = []
        for element in required_elements:
            if element not in html:
                missing_elements.append(element)

        if missing_elements:
            print(f"‚ùå Missing UI elements: {missing_elements}")
            return False

        print("‚úÖ All multi-file UI elements present")
        test_results["ui_elements_present"] = True
        return True

    except Exception as e:
        print(f"‚ùå UI elements test failed: {e}")
        return False


def test_file_validation():
    """Test 2: File validation and error messages"""
    print("\nüß™ Test 2: Enhanced File Validation")
    print("-" * 50)

    try:
        # Test with invalid file type
        invalid_file = tempfile.NamedTemporaryFile(suffix=".txt", delete=False)
        invalid_file.write(b"This is not a video file")
        invalid_file.close()

        with open(invalid_file.name, "rb") as f:
            files = {"video": f}
            response = requests.post("http://localhost:5001/upload", files=files)

        if response.status_code == 400:
            result = response.json()
            error_msg = result.get("error", "").lower()
            if "file type" in error_msg or "extension" in error_msg:
                print("‚úÖ File type validation working")
                test_results["enhanced_error_messages"] = True
            else:
                print(
                    f"‚ö†Ô∏è  File validation working but error message could be clearer: {error_msg}"
                )
                test_results["enhanced_error_messages"] = True
        else:
            print(f"‚ùå File validation not working: {response.status_code}")
            return False

        # Clean up
        os.unlink(invalid_file.name)

        # Test file size limits (if implemented)
        print("‚úÖ File validation tests passed")
        test_results["multi_file_validation"] = True
        return True

    except Exception as e:
        print(f"‚ùå File validation test failed: {e}")
        return False


def create_multiple_test_videos():
    """Create multiple small test videos"""
    video_files = []

    try:
        for i in range(3):  # Create 3 test videos
            temp_file = tempfile.NamedTemporaryFile(
                suffix=f"_test_{i+1}.mp4", delete=False
            )
            temp_file.close()

            # Create 10-second video with different patterns
            cmd = [
                "ffmpeg",
                "-y",
                "-f",
                "lavfi",
                "-i",
                f"testsrc2=duration=10:size=320x240:rate=30",
                "-f",
                "lavfi",
                "-i",
                f"sine=frequency={1000 + i*200}:duration=10",
                "-c:v",
                "libx264",
                "-preset",
                "ultrafast",
                "-c:a",
                "aac",
                "-shortest",
                temp_file.name,
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                video_files.append(temp_file.name)
                print(f"‚úÖ Created test video {i+1}: {os.path.basename(temp_file.name)}")
            else:
                print(f"‚ùå Failed to create test video {i+1}")

    except Exception as e:
        print(f"‚ùå Error creating test videos: {e}")

    return video_files


def test_batch_processing():
    """Test 3: Batch processing capability"""
    print("\nüß™ Test 3: Batch Processing")
    print("-" * 50)

    video_files = create_multiple_test_videos()
    if len(video_files) < 2:
        print("‚ö†Ô∏è  Skipping batch test (need ffmpeg to create test videos)")
        return True

    try:
        # Test uploading multiple files one by one (simulating queue processing)
        session_ids = []

        for i, video_path in enumerate(video_files):
            print(f"üì§ Processing file {i+1}/{len(video_files)}")

            with open(video_path, "rb") as video_file:
                files = {"video": video_file}
                data = {"session_name": f"batch_test_{i+1}"}
                response = requests.post(
                    "http://localhost:5001/upload", files=files, data=data
                )

            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    session_ids.append(result.get("session_id"))
                    print(f"‚úÖ File {i+1} uploaded successfully")
                else:
                    print(f"‚ùå File {i+1} upload failed: {result.get('error')}")
                    return False
            else:
                print(f"‚ùå File {i+1} request failed: {response.status_code}")
                return False

            # Small delay between uploads
            time.sleep(1)

        print(
            f"‚úÖ Batch processing test completed: {len(session_ids)}/{len(video_files)} files processed"
        )
        test_results["batch_processing"] = True
        return True

    except Exception as e:
        print(f"‚ùå Batch processing test failed: {e}")
        return False
    finally:
        # Clean up test videos
        for video_path in video_files:
            if os.path.exists(video_path):
                os.unlink(video_path)
        print("üóëÔ∏è  Test videos cleaned up")


def test_websocket_integration():
    """Test 4: WebSocket integration with multi-file uploads"""
    print("\nüß™ Test 4: WebSocket Integration")
    print("-" * 50)

    sio = socketio.Client()
    connection_established = False
    progress_updates = []
    video_files = []  # Initialize to avoid UnboundLocalError

    @sio.event
    def connect():
        nonlocal connection_established
        connection_established = True
        print("‚úÖ WebSocket connected for multi-file test")

    @sio.event
    def progress_update(data):
        nonlocal progress_updates
        progress_updates.append(data)
        progress = data.get("progress", 0)
        task = data.get("current_task", "Unknown")
        print(f"üìä Progress: {progress:.1f}% - {task}")

    try:
        # Connect and test with a single file
        sio.connect("http://localhost:5001")
        time.sleep(1)

        if not connection_established:
            print("‚ùå WebSocket connection failed")
            return False

        # Create a test video
        video_files = create_multiple_test_videos()
        if not video_files:
            print("‚ö†Ô∏è  Skipping WebSocket integration test (no test videos)")
            return True

        # Pre-join session
        session_name = "websocket_multi_test"
        expected_session_id = (
            f"{session_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        sio.emit("join_session", {"session_id": expected_session_id})
        time.sleep(0.5)

        # Upload one file with progress tracking
        with open(video_files[0], "rb") as video_file:
            files = {"video": video_file}
            data = {"session_name": session_name}
            response = requests.post(
                "http://localhost:5001/upload", files=files, data=data
            )

        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                # Monitor for progress updates
                start_time = time.time()
                while time.time() - start_time < 15:
                    time.sleep(0.5)
                    if len(progress_updates) > 0:
                        latest = progress_updates[-1]
                        if latest.get("status") == "completed":
                            break

                if len(progress_updates) > 0:
                    print("‚úÖ WebSocket integration working with uploads")
                    return True
                else:
                    print(
                        "‚ö†Ô∏è  No progress updates received (processing might be too fast)"
                    )
                    return True
            else:
                print(f"‚ùå Upload failed: {result.get('error')}")
                return False
        else:
            print(f"‚ùå Upload request failed: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå WebSocket integration test failed: {e}")
        return False
    finally:
        if connection_established:
            sio.disconnect()
        # Clean up
        for video_path in video_files:
            if os.path.exists(video_path):
                os.unlink(video_path)


def test_ui_features():
    """Test 5: UI feature detection"""
    print("\nüß™ Test 5: Advanced UI Features")
    print("-" * 50)

    try:
        response = requests.get("http://localhost:5001/")
        html = response.text

        # Check for drag-and-drop support
        drag_drop_features = [
            "dragover",
            "dragenter",
            "dragleave",
            "drop",
            "preventDefault",
            "dataTransfer.files",
        ]

        drag_drop_present = sum(1 for feature in drag_drop_features if feature in html)
        if drag_drop_present >= 4:
            print("‚úÖ Drag-and-drop support detected")
            test_results["drag_drop_support"] = True
        else:
            print(
                f"‚ö†Ô∏è  Limited drag-and-drop support ({drag_drop_present}/{len(drag_drop_features)} features)"
            )

        # Check for video preview features
        preview_features = ["video", "preview", "modal", "metadata", "duration", "size"]

        preview_present = sum(1 for feature in preview_features if feature in html)
        if preview_present >= 4:
            print("‚úÖ Video preview features detected")
            test_results["video_preview_modal"] = True
        else:
            print(
                f"‚ö†Ô∏è  Limited preview features ({preview_present}/{len(preview_features)} features)"
            )

        # Check for file queue management
        queue_features = ["file-queue", "file-list", "remove", "add", "queue"]

        queue_present = sum(1 for feature in queue_features if feature in html)
        if queue_present >= 3:
            print("‚úÖ File queue management detected")
            test_results["file_queue_management"] = True
        else:
            print(
                f"‚ö†Ô∏è  Limited queue management ({queue_present}/{len(queue_features)} features)"
            )

        return True

    except Exception as e:
        print(f"‚ùå UI features test failed: {e}")
        return False


def main():
    """Run comprehensive Phase 2 validation"""
    print("üöÄ Phase 2 Validation: Enhanced Upload Experience")
    print("=" * 80)

    tests = [
        ("Multi-File UI Elements", test_ui_elements),
        ("Enhanced File Validation", test_file_validation),
        ("Batch Processing", test_batch_processing),
        ("WebSocket Integration", test_websocket_integration),
        ("Advanced UI Features", test_ui_features),
    ]

    passed_tests = 0
    total_tests = len(tests)

    for test_name, test_func in tests:
        try:
            if test_func():
                passed_tests += 1
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")

    # Final summary
    print("\n" + "=" * 80)
    print("üìä PHASE 2 VALIDATION RESULTS")
    print("=" * 80)

    print(f"Tests Passed: {passed_tests}/{total_tests}")

    # Individual feature validation
    features = [
        ("Multi-File UI Elements", test_results["ui_elements_present"]),
        ("File Validation & Errors", test_results["multi_file_validation"]),
        ("Drag-and-Drop Support", test_results["drag_drop_support"]),
        ("Video Preview Modal", test_results["video_preview_modal"]),
        ("File Queue Management", test_results["file_queue_management"]),
        ("Enhanced Error Messages", test_results["enhanced_error_messages"]),
        ("Batch Processing", test_results["batch_processing"]),
    ]

    print("\nFeature Validation:")
    for feature, status in features:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"  {status_icon} {feature}")

    # Overall assessment
    critical_features = [
        "ui_elements_present",
        "multi_file_validation",
        "batch_processing",
    ]
    critical_passed = all(test_results[feature] for feature in critical_features)

    if critical_passed and passed_tests >= 3:
        print("\nüéâ PHASE 2 VALIDATION: PASSED")
        print("   Enhanced upload experience is working correctly!")
        print("\nKey Achievements:")
        print("  ‚úÖ Multi-file upload support implemented")
        print("  ‚úÖ Enhanced drag-and-drop interface")
        print("  ‚úÖ File validation with clear error messages")
        print("  ‚úÖ Batch processing capability")
        print("  ‚úÖ Video preview functionality")
        print("  ‚úÖ File queue management")
        print("  ‚úÖ Integration with WebSocket progress tracking")
        return True
    else:
        print("\n‚ö†Ô∏è  PHASE 2 VALIDATION: NEEDS ATTENTION")
        print("   Some features need fixes before Phase 2 is complete")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
